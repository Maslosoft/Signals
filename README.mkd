<!--header-->
<!-- Auto generated do not modify between `header` and `/header` -->

# <a href="https://maslosoft.com/signals/">Maslosoft Signals</a>
<a href="https://maslosoft.com/signals/">_Wireless Cross-Component Communication_</a>

<a href="https://packagist.org/packages/maslosoft/signals" title="Latest Stable Version">
<img src="https://poser.pugx.org/maslosoft/signals/v/stable.svg" alt="Latest Stable Version" style="height: 20px;"/>
</a>
<a href="https://packagist.org/packages/maslosoft/signals" title="License">
<img src="https://poser.pugx.org/maslosoft/signals/license.svg" alt="License" style="height: 20px;"/>
</a>
<a href="https://scrutinizer-ci.com/g/Maslosoft/Signals/?branch=master">
	<img src="https://scrutinizer-ci.com/g/Maslosoft/Signals/badges/quality-score.png?b=master" alt="Scrutinizer Code Quality"/>
</a>
<a href="https://scrutinizer-ci.com/g/Maslosoft/Signals/?branch=master">
	<img src="https://scrutinizer-ci.com/g/Maslosoft/Signals/badges/coverage.png?b=master" alt="Code Coverage" />
</a>

### Quick Install
```bash
composer require maslosoft/signals
```

### Documentation

<a href="https://maslosoft.com/signals/docs/">Full Signals Documentation</a>





# Connecting components

Various application components must be connected to each other.
This should be made in a soft manner, so that when adding
or removing component code will not require to change.

### Wireless connection

Signals provide somthing like wireless connection between
components. On of them emit signal, the other receives it.
This can be done other way around. That one application
component sends signal, and several components listen
to that signal.

<!--/header-->
## Wireless cross-component communication

This component allows for interaction of application components, without prior or explicit assignment.

## Setup

Use composer to install

```bash
composer require maslosoft/signals:"*"
```
	
Or by hard way, download somewhere in your project and ensure autoloading works for `Maslosoft\Signals\*` and you include dep too;
	
Setup signals. After calling `init` any further instance will be configured same as below `$signal`.

```php
$signal = new Maslosoft\Signals\Signal();
$signal->runtimePath = RUNTIME_PATH;
$signal->paths = [
	MODELS_PATH
];
$signal->init();
```

Generate signals definition, only once, hook it to your build script etc.

```php
$signal = new Maslosoft\Signals\Signal();
(new Maslosoft\Signals\Utility($signal))->generate();
```

## Usage

### Emiting signal

Define signal:

```php
namespace MyNamespace\Signals;

class AccountMenuItems extends AdminMenuItems
{
	public $item = [];
}
```

Define class with slot with `@SlotFor` annotation

```php
namespace Maslosoft\Ilmatar\Modules;

class MyModule
{
	/**
	 * @SlotFor(MyNamespace\Signals\AccountMenuItems)
	 */
	public function reactOnAccountMenu(MyNamespace\Signals\AccountMenuItems $signal)
	{
		$signal->item = [
			'url' => '/content/myBlog',
			'label' => 'My blog'
		];
	}
}
```


Emit signal and get results of this call:

```php
$signal = new Maslosoft\Signals\Signal();
$result = $signal->emit(new AdminMenuItems());

echo $result[0]->item[0]['label']; // My blog
```

### Gathering signals